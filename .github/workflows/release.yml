on:
  push:
    tags:
      - "v*" # Run when tag matches v*, i.e. v1.0, v20.15.10

name: Release

env:
  RELEASE_BIN: editorconfiger
  RELEASE_DIR: artifacts
  GITHUB_REF: "${{ github.ref }}"
  WINDOWS_TARGET: x86_64-pc-windows-msvc
  MACOS_TARGET: x86_64-apple-darwin
  LINUX_TARGET: x86_64-unknown-linux-musl

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [ linux, macos, windows ]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable

    steps:
      - uses: actions/checkout@v2

      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      - name: Install Rust
        if: matrix.rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}

      - name: Install musl-tools (Linux)
        if: matrix.build == 'linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install musl-tools -y

      - name: Install p7zip (MacOS)
        if: matrix.build == 'macos'
        run: brew install p7zip

      - name: Build (Linux)
        if: matrix.build == 'linux'
        run: |
          rustup target add ${{ env.LINUX_TARGET }}
          cargo build --release --bin editorconfiger --features="build-binary" --target ${{ env.LINUX_TARGET }}

      - name: Build (MacOS)
        if: matrix.build == 'macos'
        run: cargo build --release --bin editorconfiger --features="build-binary"

      - name: Build (Windows)
        if: matrix.build == 'windows'
        run: cargo build --release --bin editorconfiger --features="build-binary"
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static

      - name: Create artifact directory
        run: |
          mkdir ${{ env.RELEASE_DIR }}
          mkdir dist

      - name: Create tarball (Linux)
        if: matrix.build == 'linux'
        run: |
          cp ./target/${{ env.LINUX_TARGET }}/release/${{ env.RELEASE_BIN }} ./dist/${{ env.RELEASE_BIN }}
          7z a -ttar -so -an ./dist/* | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_TARGET }}.tar.gz

      - name: Build Debian release (x86-64)
        if: matrix.build == 'linux'
        run: |
          cargo install cargo-deb
          cargo deb --no-build --target ${{ env.LINUX_TARGET }}
          cp ./target/${{ env.LINUX_TARGET }}/debian/editorconfiger_*.deb ./${{ env.RELEASE_DIR }}/

      - name: Build RPM release (x86-64)
        if: matrix.build == 'linux'
        run: |
          cargo install cargo-generate-rpm
          cargo generate-rpm --target ${{ env.LINUX_TARGET }}
          cp ./target/${{ env.LINUX_TARGET }}/generate-rpm/editorconfiger-*.rpm ./${{ env.RELEASE_DIR }}/ 

      - name: Create tarball (Windows)
        if: matrix.build == 'windows'
        shell: bash
        run: |
          mv ./target/release/${{ env.RELEASE_BIN }}.exe ./dist/${{ env.RELEASE_BIN }}.exe
          7z a -ttar -so -an ./dist/* | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_TARGET }}.tar.gz

      - name: Create tarball (MacOS)
        if: matrix.build == 'macos'
        run: |
          mv ./target/release/${{ env.RELEASE_BIN }} ./dist/${{ env.RELEASE_BIN }}
          7z a -ttar -so -an ./dist/* | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}.tar.gz

      - name: Upload Zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build }}
          path: ./${{ env.RELEASE_DIR }}

  release:
    name: GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}

      - name: Download Linux tarball
        uses: actions/download-artifact@v1
        with:
          name: linux

      - name: Download Windows tarball
        uses: actions/download-artifact@v1
        with:
          name: windows

      - name: Download MacOS tarball
        uses: actions/download-artifact@v1
        with:
          name: macos

      - name: Install Rust
        run: |
          rustup update stable --no-self-update
          rustup default stable
          cargo install releaser
      - name: Create brew formula
        run: /home/runner/.cargo/bin/releaser b -c . -b https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/ -l './linux/' -m './macos/' -u ${{ env.RELEASE_BIN }}.rb
      - name: Publish brew formula
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.GH_TOKEN }}
        with:
          github_server: 'github.com'
          source_file: ${{ env.RELEASE_BIN }}.rb
          destination_repo: 'aegoroff/homebrew-tap'
          user_email: 'egoroff@email.com'
          user_name: 'aegoroff'
          commit_message: "release: ${{ steps.get_version.outputs.VERSION }}"

      - name: Create scoop json
        run: /home/runner/.cargo/bin/releaser s -c . -b https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/ -i './windows/' -e ${{ env.RELEASE_BIN }}.exe -u ${{ env.RELEASE_BIN }}.json
      - name: Publish scoop json
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.GH_TOKEN }}
        with:
          github_server: 'github.com'
          source_file: ${{ env.RELEASE_BIN }}.json
          destination_repo: 'aegoroff/scoop-bucket'
          user_email: 'egoroff@email.com'
          user_name: 'aegoroff'
          commit_message: "release: ${{ steps.get_version.outputs.VERSION }}"


      - name: Release Linux tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_TARGET }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_TARGET }}.tar.gz

      - name: Release Windows tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_TARGET }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_TARGET }}.tar.gz

      - name: Release MacOS tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}.tar.gz